name: SPFxDemo-CICD

on:
  push:
    branches: [ main ]
    
env:
  APP_FILE_PATH: '**/*.sppkg'
  SEND_MAIL: 'false'
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v1
      
    # Setup node.js runtime
    - name: Use Node.js 14.18.1
      uses: actions/setup-node@v1
      with:
        node-version: 14.18.1
        
    # npm install
    - name: Run npm install
      run: |
        npm install
    
    # gulp bundle and package solution
    - name: Bundle 
      run: |
        gulp bundle --ship --warnoff
        
    # Package Solution
    - name: Package Solution
      run: |
        gulp package-solution --ship 
    
    # Get Package Name and Set it to variable
    - name: Set pkgname
      id: get-pkgname
      run: |
        echo ::set-output name=pkgname::$(find . -name *.sppkg)
        
    # Output the Package Name
    - name: Use the output
      run: |
        echo 'The output pkgname is ${{ steps.get-pkgname.outputs.pkgname }}' 
        
    # Deploy Package
    - name: Connect To SharePoint And Deploy Package
      env: #Set secrets as environment variables
        DEVSITEURL: ${{ secrets.DEVSITEURL }}
        TENANT: ${{ secrets.TENANT }}
        APPID: ${{ secrets.APPID }}
        BASEENCODEDSTRING: ${{ secrets.BASEENCODEDSTRING }}
        CERTPWD: ${{ secrets.CERTPWD }}
        packagePath: ${{ steps.get-pkgname.outputs.pkgname }}
      run: |
        Write-Host "Installing PnP Module"
        Install-Module -Name PnP.PowerShell -Force -Scope "CurrentUser"
        Write-Host "Connecting to SharePoint Site"
        Connect-PnPOnline -Url ${{ secrets.DEVSITEURL }} -ClientId ${{ secrets.APPID }} -CertificateBase64Encoded ${{ secrets.BASEENCODEDSTRING }} -CertificatePassword (ConvertTo-SecureString -AsPlainText ${{ secrets.CERTPWD }} -Force) -Tenant ${{ secrets.TENANT }}
        Write-Host "Deploying App Package"
        Add-PnPApp -Scope Site -Publish -Overwrite -Path ${{ steps.get-pkgname.outputs.pkgname }}
        Write-Host "Step Done"
      shell: pwsh
      
    # Job Completed
    - name: Job Completed
      run: | 
        echo 'Workflow Completed !!!'
          
        
